#!/usr/bin/env node
"civet coffeeComment coffeeEq coffeeInterpolation"
* as fs from 'node:fs'
* as url from 'node:url'

declare global
  var fetch: typeof import('undici').fetch

operator {min, max} := Math

{load as loadCheerio, type Cheerio, type Element} from 'cheerio'
function fromURL(url: string)
  response := fetch url |> await
  unless response.ok
    throw new Error "Failed to fetch #{url}"
  # "You should always be fine when waiting for at least one or two second
  # between two consecutive requests." [https://dblp.org/faq/1474706.html]
  await new Promise (done) => setTimeout done, 1000
  response.text() |> await |> loadCheerio

type PaperCounts = Record<string, number>

class Author
  name?: string
  url?: string
  paperCounts?: PaperCounts
  coauthorCount?: number

class Fetcher
  authors = new Map<string, Author>

  authorSearch(query: string): Promise<string | undefined>
    searchUrl := "https://dblp.org/search/author?q=#{encodeURIComponent query}"
    $ := await fromURL searchUrl
    # Restrict to first list of results (typically, "Exact matches")
    people := $('.result-list').first()
    .find('li[itemtype="http://schema.org/Person"]')
    let url
    # DBLP sometimes returns the author page directly
    links := $('link[title="person page HTML"]')
    if links.length
      url = links.first().attr('href')
    else
      switch people.length
        0
          console.log "!! No authors found for #{query}"
          return
        > 1
          console.log "!! Multiple authors found for #{query} at #{searchUrl}"
      url = people.first().find('a').attr('href')
    console.log "#{query} -> #{url}"
    url

  authorFetch(name: string, url?: string)
    return if @authors.has name
    url ?= await @authorSearch name
    return unless url?

    paperCounts: PaperCounts := {}
    $ := await fromURL url
    $('div.nr').each ->
      id := $(this).attr 'id'
      if match := /^([a-z])(\d+)/.exec id ?? ''
        (paperCounts[match[1]] ??= 0) max= parseInt match[2], 10
      else
        console.log "Unrecognized .nr id: #{id}"
      return

    coauthorCount .= 0
    $('#coauthor-section a[title="show joint publications"]').each ->
      number := parseInt $(this).text(), 10
      if isNaN number
        console.log "Unrecognized coauthor tag: #{$(this).html()}"
      else
        coauthorCount max= number
      return
    unless coauthorCount
      console.log "No coauthors found for #{name}"

    author := {name, url, paperCounts, coauthorCount}
    @authors.set name, author
    @summarizeAuthor name
    author

  summarizeAuthor(name: string)
    author := @authors.get name
    return unless author?
    {paperCounts, coauthorCount} := author
    console.log "#{name} -- coauthors #{coauthorCount}; papers #{paperCounts ?? {} |> Object.entries |> .map (x) => x.join ':' |> .join ', '}"

  summarizeGeneric(title: string, valueOf: (author: Author) => number | undefined)
    # CIVET: should not need parentheses
    values := (
      for author of @authors.values()
        value := valueOf author
        continue unless value?
        [value, author.name] as const
    ).sort (x, y) => x[0] - y[0]
    console.log ''
    console.log "** #{title}"
    for [value, name] of values
      console.log "#{value} -- #{name}"
    return

  summarizePaperCounts()
    @summarizeGeneric "TOTAL PAPER COUNT (j + c)", ({paperCounts}) =>
      return unless paperCounts?
      (paperCounts.j ?? 0) + (paperCounts.c ?? 0)

  summarizeCoauthorCount()
    @summarizeGeneric "COAUTHOR COUNT", ({coauthorCount}) => coauthorCount

  summarize()
    @summarizePaperCounts()
    @summarizeCoauthorCount()

function main
  if process.argv.length <= 2
    return console.log '''
      Usage: beancount <author-or-filename> ...
      Each command-line argument can be a full author name (in quotes)
      or a filename containing one author name per line.
    '''

  fetcher := new Fetcher
  for arg of process.argv[2..]
    if stat := try await fs.promises.stat arg
      contents := await fs.promises.readFile arg, encoding: 'utf8'
      for let line of contents.split /(\r|\n)+/
        line = line.trim()
        continue unless line.length
        await fetcher.authorFetch line
    else
      await fetcher.authorFetch arg
  fetcher.summarize()

main() if import.meta.url.startsWith('file:') and
          fs.realpathSync(process.argv[1]) ==
          fs.realpathSync url.fileURLToPath import.meta.url
